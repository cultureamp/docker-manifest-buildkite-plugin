#!/usr/bin/env bash
set -euo pipefail

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck source=lib/shared.bash
. "$DIR/../lib/shared.bash"


function main(){
  local image_name; image_name="$(plugin_read_config "IMAGE_NAME")"
  local image_names_raw; image_names_raw="$(plugin_read_list "SOURCE_IMAGE_NAMES")"
  local image_names; readarray -t image_names <<< "${image_names_raw}"

  if [[ -z "${image_name}" ]]; then
    1>&2 echo "+++ ❌ Docker manifest plugin error"
    1>&2 echo "No 'image-name' argument provided: this is required as it's the name of the created image."
    exit 1
  fi

  if [[ -z "${image_names_raw}" || "${#image_names[@]}" -eq "0" ]]; then
    1>&2 echo "+++ ❌ Docker manifest plugin error"
    1>&2 echo "No 'source-image-names' argument provided: these are the images that are collated into the target manifest."
    exit 1
  fi

  # create a "manifest" for an image that references the two architecture-specific images
  docker manifest create "${image_name}" "${image_names[@]}"

  # push the manifest image with the base name (lacking the architecture scoping)
  docker manifest push "${image_name}"
}

main "$@"
